//
//  HomePresenter.swift
//
//  Created by mohamed hashem on 19/02/2021.
//  Copyright (c) 2021 mohamed hashem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresenterInput: class {
    func present(section: ForecastOrcas)
    func present(error: Error, cityName: String)
}

protocol HomePresenterOutput: class {
    func display(section: WeatherModel)
    func display(error: Error, cachedSection: WeatherModel?)
}

class HomePresenter: HomePresenterInput {

    weak var output: HomePresenterOutput?
    var weatherSection: [WeatherModel.Sections] = []
    
    func present(section: ForecastOrcas) {
        section.list.forEach { forecastOrcas in
            // create custom model from api model to use it in app
            weatherSection.append(WeatherModel.Sections(cityName: section.city?.name,
                                                 HeaderTitle: forecastOrcas.dt_txt,
                                                 windSpeed: String(forecastOrcas.wind?.speed ?? 0.0),
                                                 windDeg: String(forecastOrcas.wind?.deg ?? 0.0),
                                                 temp: String(forecastOrcas.main?.temp ?? 0.0),
                                                 pressure: String(forecastOrcas.main?.pressure ?? 0),
                                                 description: forecastOrcas.weather?.first?.description))
        }
        let weather = WeatherModel(sections: weatherSection)

        // check if weather was cached
        // weather cached
        let weatherModelType = ConstantStore.sharedInstance.getWeatherModelType(weather: weather)
        switch weatherModelType {
        case .new:
            ConstantStore.sharedInstance.saveNewWeather(weather: weather, weatherType: .new)
        case .cached:
            break // in future replace old data by new data
        }

        output?.display(section: weather)
    }
    
    func present(error: Error, cityName: String) {
        guard let weather = ConstantStore.sharedInstance.getWeatherMap(),
              !weather.isEmpty else {
            output?.display(error: error, cachedSection: nil)
            return
        }

        weather.forEach { weatherIs in
            if weatherIs.sections.first?.cityName == cityName {
                output?.display(error: error, cachedSection: weatherIs)
            } else {
                output?.display(error: error, cachedSection: nil)
            }
        }
    }
}
