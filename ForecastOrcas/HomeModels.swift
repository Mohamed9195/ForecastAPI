//
//  HomeModels.swift
//
//  Created by mohamed hashem on 19/02/2021.
//  Copyright (c) 2021 mohamed hashem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct ForecastOrcas: Codable {

    var list: [List] = []
    var city: City?

    // for test only
    init(_ id: Int) {
        let newCity = City(id: id, name: " ")
        self.city = newCity
    }
    
    struct City: Codable {
        var id: Int?
        var name: String?
    }

    struct List: Codable {
        var dt_txt: String?
        var wind: Wind?
        var main: Main?
        var weather: [Weather]?

        struct Wind: Codable {
            var speed: Double?
            var deg: Double?
        }

        struct Main: Codable {
            var temp: Double?
            var pressure: Int?
        }

        struct Weather: Codable {
            var description: String?
        }
    }
}

// using this model in HomeViewController -> weather cell
struct WeatherModel: Codable {

    var sections: [Sections] = []

    struct Sections: Codable {
        var cityName: String?
        var HeaderTitle: String?
        var windSpeed: String?
        var windDeg: String?
        var temp: String?
        var pressure: String?
        var description: String?
    }
}

enum WeatherModelType {
    case new
    case cached
}


// MARK:- other way to codable model (ForecastOrcas) in line 15
struct ForecastOrcaByCodingKeys: Codable {

    var weather: [ListByCodingKeys] = []
    var city: CityByCodingKeys?

    private enum CodingKeys: String, CodingKey {
        case weather = "list"
        case city
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.city = try? container.decodeIfPresent(CityByCodingKeys.self, forKey: .city)
        if let weather = try container.decodeIfPresent([ListByCodingKeys].self, forKey: .weather) {
            self.weather = weather
        }
    }
}

struct CityByCodingKeys: Codable {
    var cityId: Int?
    var cityName: String?

    private enum CodingKeys: String, CodingKey {
        case cityId = "id"
        case cityName = "name"
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.cityId = try container.decodeIfPresent(Int.self, forKey: .cityId)
        self.cityName = try container.decodeIfPresent(String.self, forKey: .cityName)
    }
}

struct ListByCodingKeys: Codable {
    var dateOfWeather: String?
    var windInfo: Wind?
    var weatherMainInfo: Main?
    var weather: [Weather]?

    private enum CodingKeys: String, CodingKey {
        case dateOfWeather = "dt_txt"
        case windInfo = "wind"
        case weatherMainInfo = "main"
        case weather
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.dateOfWeather = try container.decodeIfPresent(String.self, forKey: .dateOfWeather)
        self.windInfo = try container.decodeIfPresent(Wind.self, forKey: .windInfo)
        self.weatherMainInfo = try container.decodeIfPresent(Main.self, forKey: .weatherMainInfo)
        self.weather = try container.decodeIfPresent([Weather].self, forKey: .weather)
    }

    struct Wind: Codable {
        var windSpeed: Double?
        var windDegree: Double?

        private enum CodingKeys: String, CodingKey {
            case windSpeed = "speed"
            case windDegree = "deg"
        }

        init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            self.windSpeed = try container.decodeIfPresent(Double.self, forKey: .windSpeed)
            self.windDegree = try container.decodeIfPresent(Double.self, forKey: .windDegree)
        }
    }

    struct Main: Codable {
        var weatherTemperature: Double?
        var weatherPressure: Int?

        private enum CodingKeys: String, CodingKey {
            case weatherTemperature = "temp"
            case weatherPressure = "pressure"
        }

        init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            self.weatherPressure = try container.decodeIfPresent(Int.self, forKey: .weatherPressure)
            self.weatherTemperature = try container.decodeIfPresent(Double.self, forKey: .weatherTemperature)
        }
    }

    struct Weather: Codable {
        var weatherDescription: String?

        private enum CodingKeys: String, CodingKey {
            case weatherDescription = "description"
        }

        init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            self.weatherDescription = try container.decodeIfPresent(String.self, forKey: .weatherDescription)
        }
    }
}
